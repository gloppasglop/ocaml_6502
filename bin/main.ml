open Stdio
open Cpu

let () = print_endline "Hello, World!"

let pins =
  { data = 0
  ; address = 0
  ; ioports = 0
  ; irq = false
  ; nmi = false
  ; reset = false
  ; rdy = true
  ; rw = true
  ; sync = true
  ; phy1 = true
  ; phy2 = true
  ; aec = true
  }
;;

let mem = Array.make 65536 0xFF
let bus = { address = 0; data = 0 }

let c6502 =
  { pc = 0
  ; a = 32
  ; x = 1
  ; y = 0x1
  ; sp = 0xFF
  ; ir = 0
  ; sr = 0x00
  ; adl = 0
  ; adh = 0
  ; tmp_data = 0
  }
;;

let pgm =
  [ 0xEA
  ; 0xEA
  ; 0xEA
  ; 0xCA
  ; 0xCA
  ; 0xCA
  ; 0x88
  ; 0x88
  ; 0x88
  ; 0xEA
  ; 0xE8
  ; 0xE8
  ; 0xE8
  ; 0xEA
  ; 0x38
  ; 0xF8
  ; 0x78
  ; 0xC8
  ; 0xC8
  ; 0xC8
  ; 0x18
  ; 0xD8
  ; 0x58
  ; 0xB8
  ; 0xEA
  ; 0xEA
  ; 0xEA
  ; 0xAA
  ; 0xA8
  ; 0x8A
  ; 0xBA
  ; 0xBA
  ; 0x8A
  ; 0xA8
  ; 0x0A
  ; 0x0A
  ; 0x0A
  ; 0x0A
  ; 0x0A
  ; 0x0A
  ; 0x0A
  ; 0x0A
  ; 0xAA
  ; 0x18
  ; 0xCA
  ; 0x8A
  ; 0x4A
  ; 0x4A
  ; 0x4A
  ; 0x4A
  ; 0x4A
  ; 0x4A
  ; 0x4A
  ; 0x4A
  ; 0x4A
  ; 0x98
  ; 0x18
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x2A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x6A
  ; 0x69
  ; 0x10
  ; 0x69
  ; 0x10
  ; 0x69
  ; 0x80
  ; 0x69
  ; 0x50
  ; 0x69
  ; 0x10
  ; 0x69
  ; 0x10
  ; 0x69
  ; 0x2B
  ; 0x69
  ; 0x40
  ; 0x69
  ; 0x40
  ; 0x29
  ; 0xFF
  ; 0x29
  ; 0x7F
  ; 0xC9
  ; 0x40
  ; 0xC9
  ; 0x50
  ; 0xC9
  ; 0xEF
  ; 0xAA
  ; 0xE0
  ; 0x30
  ; 0xE0
  ; 0x40
  ; 0xE0
  ; 0x50
  ; 0xE0
  ; 0xEF
  ; 0xA8
  ; 0xE0
  ; 0x30
  ; 0xE0
  ; 0x40
  ; 0xE0
  ; 0x50
  ; 0xE0
  ; 0xEF
  ; 0xA9
  ; 0x00
  ; 0xA9
  ; 0x10
  ; 0xA9
  ; 0x90
  ; 0xA2
  ; 0x00
  ; 0xA2
  ; 0x10
  ; 0xA2
  ; 0x90
  ; 0xA0
  ; 0x00
  ; 0xA0
  ; 0x10
  ; 0xA0
  ; 0x90
  ; 0x09
  ; 0x00
  ; 0x09
  ; 0xFF
  ; 0x38
  ; 0xA9
  ; 0x64
  ; 0xE9
  ; 0x18
  ; 0x38
  ; 0xA9
  ; 10
  ; 0xE9
  ; 8
  ; 0x38
  ; 0xA9
  ; 10
  ; 0xE9
  ; 10
  ; 0x38
  ; 0xA9
  ; 10
  ; 0xE9
  ; 11
  ; 0x38
  ; 0xA9
  ; 0xFD
  ; 0xE9
  ; 2
  ; 0xEA
  ; 0xEA
  ; 0xA9
  ; 0x00
  ; 0xAD
  ; 0xFE
  ; 0xFF
  ; 0xAD
  ; 0x03
  ; 0x00
  ; 0xEA
  ; 0xEA
  ; 0xEA
  ; 0xEA
  ; 0x18
  ; 0xA9
  ; 0x10
  ; 0x6D
  ; 0x03
  ; 0x00
  ; 0xA9
  ; 0x7F
  ; 0x2D
  ; 0x03
  ; 0x00
  ; 0xA9
  ; 0x10
  ; 0x2C
  ; 0x00
  ; 0xC0
  ; 0xA9
  ; 0xCA
  ; 0xCD
  ; 0x03
  ; 0x00
  ; 0xEC
  ; 0x03
  ; 0x00
  ; 0xCC
  ; 0x03
  ; 0xC0 (***)
  ; 0xA9
  ; 0x01
  ; 0x8D
  ; 0x01
  ; 0xC0 (***)
  ; 0xA2
  ; 0x02
  ; 0x8E
  ; 0x02
  ; 0xC0 (***)
  ; 0xA0
  ; 0x03
  ; 0x8C
  ; 0x03
  ; 0xC0 (***)
  ; 0xA9
  ; 0xFF
  ; 0xA2
  ; 0xFF
  ; 0xA0
  ; 0xFF
  ; 0xAD
  ; 0x01
  ; 0xC0
  ; 0xAE
  ; 0x02
  ; 0xC0
  ; 0xAC
  ; 0x03
  ; 0xC0
  ; 0xB8 (* CLV *)
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* ASL $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0xCE (* DEC $C001*)
  ; 0x01
  ; 0xC0
  ; 0x0E (* DEC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xCE (* DEC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xCE (* DEC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xCE (* DEC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $ C001*)
  ; 0x01
  ; 0xC0
  ; 0xCE (* INC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xEE (* INC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xEE (* INC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xEE (* INC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xEE (* INC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xEE (* INC $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $C001 *)
  ; 0x01
  ; 0xC0
  ; 0x4E (* LSR $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $C001 *)
  ; 0x01
  ; 0xC0
  ; 0x2E (* LSR $C001*)
  ; 0x01
  ; 0xC0
  ; 0xAD (*LDA $C001 *)
  ; 0x01
  ; 0xC0
  ; 0x6E (* LSR $C001*)
  ; 0x01
  ; 0xC0
  ; 0x18 (* CLC *)
  ; 0xAD (*LDA $C001 *)
  ; 0x01
  ; 0xC0
  ; 0xA5 (* LDA $03*)
  ; 0x03
  ; 0xEA
  ; 0xA5 (* LDA $03*)
  ; 0x01
  ; 0xEA
  ; 0xA9 (* LDA #$11 *)
  ; 0x12
  ; 0x65 (* ADC $01*)
  ; 0x01
  ; 0xA9 (* LDA #$11 *)
  ; 0x0F
  ; 0x25 (* AND $01*)
  ; 0x01
  ; 0xA9 (* LDA #$11 *)
  ; 0x0F
  ; 0x24 (* BIT $01*)
  ; 0x01
  ; 0xA9 (* LDA #$11 *)
  ; 0xEB
  ; 0xC5 (* CMP $01*)
  ; 0x01
  ; 0xA9 (* LDA #$11 *)
  ; 0xFF
  ; 0x45 (* EOR $01*)
  ; 0x01
  ; 0xA6 (* LDX $01*)
  ; 0x01
  ; 0xA4 (* LDY $01*)
  ; 0x03
  ; 0xA9 (* LDA #$11 *)
  ; 0xF0
  ; 0x05 (* ORA $01*)
  ; 0x01
  ; 0x38 (*  SEC *)
  ; 0xA9 (* LDA #$11 *)
  ; 0xE9
  ; 0xE5 (* ADC $01*)
  ; 0x01
  ]
;;

let load_pgm pgm mem =
  List.iteri
    (fun i v ->
      Printf.printf "%04X <- %02x\n" i v;
      mem.(i) <- v)
    pgm
;;

let () = load_pgm pgm mem

let () =
  Printf.printf
    "%5s %5s %4s %2s %2s %4s %2s %2s %2s\n"
    "SYNC"
    "RW"
    "ADDR"
    "D"
    "IR"
    "PC"
    "A"
    "X"
    "Y"
;;

(* TODO: Move that to another file *)
let pp_int8_bin i =
  (* Just support 8 bits*)
  let s = ref "" in
  for bit = 0 to 7 do
    s := !s ^ if (i lsr (7 - bit)) land 1 = 1 then "1" else "0"
  done;
  !s
;;

let rec run cycle cpu pins bus =
  if pins.rw
  then (
    (* We are reading from memory *)
    let cycle, cpu, pins, bus =
      Cpu.tick cycle cpu pins { bus with data = mem.(bus.address) }
    in
    Printf.printf
      "%5b %5b %04X %02X %02X %04X %02X %02X %02X %8s\n"
      pins.sync
      pins.rw
      bus.address
      bus.data
      cpu.ir
      cpu.pc
      cpu.a
      cpu.x
      cpu.y
      (pp_int8_bin cpu.sr);
    run cycle cpu pins bus)
  else (
    (* we are writing to memory *)
    let cycle, cpu, pins, bus =
      if not pins.rw
      then
        (*
           Printf.printf "Writing %02X to %04X\n" bus.data bus.address;
        *)
        mem.(bus.address) <- bus.data;
      Cpu.tick cycle cpu pins { bus with data = mem.(bus.address) }
    in
    Printf.printf
      "%5b %5b %04X %02X %02X %04X %02X %02X %02X %8s\n"
      pins.sync
      pins.rw
      bus.address
      bus.data
      cpu.ir
      cpu.pc
      cpu.a
      cpu.x
      cpu.y
      (pp_int8_bin cpu.sr);
    run cycle cpu pins bus)
;;

let () = run 0 c6502 pins bus
